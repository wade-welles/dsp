package dsp

import (
	"testing"
)

var testSample = Sample{
	+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	-0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
	-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
	-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
	+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
	-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
	-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
	+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
	-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
	-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
	-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	-0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
	-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
	-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
	+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
	-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
	-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
	-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
	-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663,
	-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585,
	-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065,
	+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663,
	+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585,
	+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065,
}

func TestSampleMean(t *testing.T) {

	expected := Signal(0.037112)

	actual := testSample.Mean()

	if !actual.Equals(expected) {
		t.Error("expected ", expected, " actual ", actual)
	}
}

func TestSampleDeviation(t *testing.T) {
	expected := Signal(0.787502)

	actual := testSample.Deviation()

	if !actual.Equals(expected) {
		t.Error("expected ", expected, " actual ", actual)
	}
}

func TestSampleRunningSum(t *testing.T) {
	expected := Sample{

		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
		11.009776,
		10.547836,
		9.228357,
		8.045570,
		7.545570,
		6.362784,
		5.043305,
		4.581365,
		3.715340,
		2.460046,
		2.106493,
		1.689073,
		0.689073,
		0.497732,
		0.592466,
		0.000000,
		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
		11.009776,
		10.547836,
		9.228357,
		8.045570,
		7.545570,
		6.362784,
		5.043305,
		4.581365,
		3.715340,
		2.460046,
		2.106493,
		1.689073,
		0.689073,
		0.497732,
		0.592466,
		0.000000,
		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
		11.009776,
		10.547836,
		9.228357,
		8.045570,
		7.545570,
		6.362784,
		5.043305,
		4.581365,
		3.715340,
		2.460046,
		2.106493,
		1.689073,
		0.689073,
		0.497732,
		0.592466,
		0.000000,
		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
		11.009776,
		10.547836,
		9.228357,
		8.045570,
		7.545570,
		6.362784,
		5.043305,
		4.581365,
		3.715340,
		2.460046,
		2.106493,
		1.689073,
		0.689073,
		0.497732,
		0.592466,
		0.000000,
		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
		11.009776,
		10.547836,
		9.228357,
		8.045570,
		7.545570,
		6.362784,
		5.043305,
		4.581365,
		3.715340,
		2.460046,
		2.106493,
		1.689073,
		0.689073,
		0.497732,
		0.592466,
		0.000000,
		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
		11.009776,
		10.547836,
		9.228357,
		8.045570,
		7.545570,
		6.362784,
		5.043305,
		4.581365,
		3.715340,
		2.460046,
		2.106493,
		1.689073,
		0.689073,
		0.497732,
		0.592466,
		0.000000,
		0.000000,
		0.592466,
		0.497732,
		0.689073,
		1.689073,
		2.106493,
		2.460046,
		3.715340,
		4.581365,
		5.043305,
		6.362784,
		7.545570,
		8.045570,
		9.228357,
		10.547836,
		11.009776,
		11.875801,
		13.131095,
		13.484648,
		13.902068,
		14.902068,
		15.093409,
		14.998675,
		15.591141,
		15.591141,
		14.998675,
		15.093409,
		14.902068,
		13.902068,
		13.484648,
		13.131095,
		11.875801,
	}

	actual := testSample.RunningSum()

	if !actual.Equals(expected) {
		t.Error("expected ", expected, " actual ", actual)
	}
}

func TestSampleConvolution(t *testing.T) {

	input := Sample{
		-0.0018225230, -0.0015879294, +0.0000000000, +0.0036977508, +0.0080754303, +0.0085302217, -0.0000000000, -0.0173976984,
		-0.0341458607, -0.0333591565, +0.0000000000, +0.0676308395, +0.1522061835, +0.2229246956, +0.2504960933, +0.2229246956,
		+0.1522061835, +0.0676308395, +0.0000000000, -0.0333591565, -0.0341458607, -0.0173976984, -0.0000000000, +0.0085302217,
		+0.0080754303, +0.0036977508, +0.0000000000, -0.0015879294, -0.0018225230,
	}

	expected := Sample{
		0.000000,
		-0.001080,
		-0.000768,
		-0.000198,
		0.000064,
		0.002085,
		0.003689,
		0.001586,
		-0.002628,
		-0.007591,
		-0.011939,
		-0.008667,
		0.008898,
		0.043054,
		0.097447,
		0.174041,
		0.268142,
		0.374772,
		0.489336,
		0.602415,
		0.705874,
		0.796835,
		0.871590,
		0.927788,
		0.968218,
		0.993467,
		1.001205,
		0.992586,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.708502,
		0.610006,
		0.501275,
		0.383439,
		0.259244,
		0.130987,
		0.000000,
		-0.130987,
		-0.259244,
		-0.383439,
		-0.501275,
		-0.610006,
		-0.708502,
		-0.795249,
		-0.867901,
		-0.925703,
		-0.968154,
		-0.993666,
		-1.001973,
		-0.993666,
		-0.968154,
		-0.925703,
		-0.867901,
		-0.795249,
		-0.708502,
		-0.610006,
		-0.501275,
		-0.383439,
		-0.259244,
		-0.130987,
		0.000000,
		0.130987,
		0.259244,
		0.383439,
		0.501275,
		0.610006,
		0.708502,
		0.795249,
		0.867901,
		0.925703,
		0.968154,
		0.993666,
		1.001973,
		0.993666,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.708502,
		0.610006,
		0.501275,
		0.383439,
		0.259244,
		0.130987,
		0.000000,
		-0.130987,
		-0.259244,
		-0.383439,
		-0.501275,
		-0.610006,
		-0.708502,
		-0.795249,
		-0.867901,
		-0.925703,
		-0.968154,
		-0.993666,
		-1.001973,
		-0.993666,
		-0.968154,
		-0.925703,
		-0.867901,
		-0.795249,
		-0.708502,
		-0.610006,
		-0.501275,
		-0.383439,
		-0.259244,
		-0.130987,
		0.000000,
		0.130987,
		0.259244,
		0.383439,
		0.501275,
		0.610006,
		0.708502,
		0.795249,
		0.867901,
		0.925703,
		0.968154,
		0.993666,
		1.001973,
		0.993666,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.708502,
		0.610006,
		0.501275,
		0.383439,
		0.259244,
		0.130987,
		0.000000,
		-0.130987,
		-0.259244,
		-0.383439,
		-0.501275,
		-0.610006,
		-0.708502,
		-0.795249,
		-0.867901,
		-0.925703,
		-0.968154,
		-0.993666,
		-1.001973,
		-0.993666,
		-0.968154,
		-0.925703,
		-0.867901,
		-0.795249,
		-0.708502,
		-0.610006,
		-0.501275,
		-0.383439,
		-0.259244,
		-0.130987,
		0.000000,
		0.130987,
		0.259244,
		0.383439,
		0.501275,
		0.610006,
		0.708502,
		0.795249,
		0.867901,
		0.925703,
		0.968154,
		0.993666,
		1.001973,
		0.993666,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.708502,
		0.610006,
		0.501275,
		0.383439,
		0.259244,
		0.130987,
		0.000000,
		-0.130987,
		-0.259244,
		-0.383439,
		-0.501275,
		-0.610006,
		-0.708502,
		-0.795249,
		-0.867901,
		-0.925703,
		-0.968154,
		-0.993666,
		-1.001973,
		-0.993666,
		-0.968154,
		-0.925703,
		-0.867901,
		-0.795249,
		-0.708502,
		-0.610006,
		-0.501275,
		-0.383439,
		-0.259244,
		-0.130987,
		0.000000,
		0.130987,
		0.259244,
		0.383439,
		0.501275,
		0.610006,
		0.708502,
		0.795249,
		0.867901,
		0.925703,
		0.968154,
		0.993666,
		1.001973,
		0.993666,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.708502,
		0.610006,
		0.501275,
		0.383439,
		0.259244,
		0.130987,
		0.000000,
		-0.130987,
		-0.259244,
		-0.383439,
		-0.501275,
		-0.610006,
		-0.708502,
		-0.795249,
		-0.867901,
		-0.925703,
		-0.968154,
		-0.993666,
		-1.001973,
		-0.993666,
		-0.968154,
		-0.925703,
		-0.867901,
		-0.795249,
		-0.708502,
		-0.610006,
		-0.501275,
		-0.383439,
		-0.259244,
		-0.130987,
		0.000000,
		0.130987,
		0.259244,
		0.383439,
		0.501275,
		0.610006,
		0.708502,
		0.795249,
		0.867901,
		0.925703,
		0.968154,
		0.993666,
		1.001973,
		0.993666,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.708502,
		0.610006,
		0.501275,
		0.383439,
		0.259244,
		0.130987,
		0.000000,
		-0.130987,
		-0.259244,
		-0.383439,
		-0.501275,
		-0.610006,
		-0.708502,
		-0.795249,
		-0.867901,
		-0.925703,
		-0.968154,
		-0.993666,
		-1.001973,
		-0.993666,
		-0.968154,
		-0.925703,
		-0.867901,
		-0.795249,
		-0.708502,
		-0.610006,
		-0.501275,
		-0.383439,
		-0.259244,
		-0.130987,
		0.000000,
		0.130987,
		0.259244,
		0.383439,
		0.501275,
		0.610006,
		0.708502,
		0.795249,
		0.867901,
		0.925703,
		0.968154,
		0.993666,
		1.001973,
		0.993666,
		0.968154,
		0.925703,
		0.867901,
		0.795249,
		0.706924,
		0.607789,
		0.498137,
		0.382390,
		0.265156,
		0.144034,
		0.014686,
		-0.126335,
		-0.280662,
		-0.436025,
		-0.562502,
		-0.627673,
		-0.609463,
		-0.505771,
		-0.344734,
		-0.174645,
		-0.038486,
		0.039270,
		0.057384,
		0.038209,
		0.010436,
		-0.009155,
		-0.014975,
		-0.009508,
		-0.002156,
		0.001322,
		0.002638,
		0.002288,
		0.000000,
	}

	actual := testSample.Convolution(input)

	if !actual.Equals(expected) {
		t.Error("expected ", expected, " actual ", actual)
	}
}

func TestSampleFirstDifference(t *testing.T) {

	expected := Sample{
		0.000000,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
		0.389268,
		0.404086,
		-0.857539,
		0.136693,
		0.682787,
		-0.682787,
		-0.136693,
		0.857539,
		-0.404086,
		-0.389268,
		0.901740,
		-0.063866,
		-0.582580,
		0.808658,
		0.286076,
		-0.687200,
		0.592466,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
		0.389268,
		0.404086,
		-0.857539,
		0.136693,
		0.682787,
		-0.682787,
		-0.136693,
		0.857539,
		-0.404086,
		-0.389268,
		0.901740,
		-0.063866,
		-0.582580,
		0.808658,
		0.286076,
		-0.687200,
		0.592466,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
		0.389268,
		0.404086,
		-0.857539,
		0.136693,
		0.682787,
		-0.682787,
		-0.136693,
		0.857539,
		-0.404086,
		-0.389268,
		0.901740,
		-0.063866,
		-0.582580,
		0.808658,
		0.286076,
		-0.687200,
		0.592466,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
		0.389268,
		0.404086,
		-0.857539,
		0.136693,
		0.682787,
		-0.682787,
		-0.136693,
		0.857539,
		-0.404086,
		-0.389268,
		0.901740,
		-0.063866,
		-0.582580,
		0.808658,
		0.286076,
		-0.687200,
		0.592466,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
		0.389268,
		0.404086,
		-0.857539,
		0.136693,
		0.682787,
		-0.682787,
		-0.136693,
		0.857539,
		-0.404086,
		-0.389268,
		0.901740,
		-0.063866,
		-0.582580,
		0.808658,
		0.286076,
		-0.687200,
		0.592466,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
		0.389268,
		0.404086,
		-0.857539,
		0.136693,
		0.682787,
		-0.682787,
		-0.136693,
		0.857539,
		-0.404086,
		-0.389268,
		0.901740,
		-0.063866,
		-0.582580,
		0.808658,
		0.286076,
		-0.687200,
		0.592466,
		0.592466,
		-0.687200,
		0.286076,
		0.808658,
		-0.582580,
		-0.063866,
		0.901740,
		-0.389268,
		-0.404086,
		0.857539,
		-0.136693,
		-0.682787,
		0.682787,
		0.136693,
		-0.857539,
		0.404086,
		0.389268,
		-0.901740,
		0.063866,
		0.582580,
		-0.808658,
		-0.286076,
		0.687200,
		-0.592466,
		-0.592466,
		0.687200,
		-0.286076,
		-0.808658,
		0.582580,
		0.063866,
		-0.901740,
	}

	actual := testSample.FirstDifference()

	if !actual.Equals(expected) {
		t.Error("expected ", expected, " actual ", actual)
	}

}

func TestSampleDFT(t *testing.T) {

	expected := DFT{
		Sample{
			11.875801,
			12.139567,
			13.009123,
			14.785490,
			18.321572,
			26.608994,
			60.727981,
			-111.380013,
			-25.626911,
			-13.515485,
			-8.750711,
			-6.236023,
			-4.699095,
			-3.672313,
			-2.943873,
			-2.404141,
			-1.990821,
			-1.665982,
			-1.405263,
			-1.192336,
			-1.015876,
			-0.867793,
			-0.742169,
			-0.634581,
			-0.541661,
			-0.460810,
			-0.389985,
			-0.327568,
			-0.272256,
			-0.222996,
			-0.178924,
			-0.139325,
			-0.103608,
			-0.071276,
			-0.041909,
			-0.015152,
			0.009298,
			0.031701,
			0.052281,
			0.071232,
			0.088723,
			0.104901,
			0.119894,
			0.133817,
			0.146768,
			0.158837,
			0.170103,
			0.180635,
			0.190495,
			0.199740,
			0.208419,
			0.216578,
			0.224258,
			0.231495,
			0.238323,
			0.244771,
			0.250868,
			0.256637,
			0.262103,
			0.267285,
			0.272203,
			0.276874,
			0.281315,
			0.285540,
			0.289562,
			0.293395,
			0.297049,
			0.300535,
			0.303864,
			0.307044,
			0.310084,
			0.312992,
			0.315775,
			0.318439,
			0.320993,
			0.323441,
			0.325788,
			0.328040,
			0.330202,
			0.332278,
			0.334273,
			0.336191,
			0.338034,
			0.339808,
			0.341514,
			0.343157,
			0.344738,
			0.346263,
			0.347730,
			0.349144,
			0.350508,
			0.351823,
			0.353092,
			0.354315,
			0.355496,
			0.356636,
			0.357736,
			0.358798,
			0.359824,
			0.360815,
			0.361771,
			0.362696,
			0.363589,
			0.364452,
			0.365286,
			0.366092,
			0.366871,
			0.367623,
			0.368351,
			0.369054,
			0.369733,
			0.370389,
			0.371024,
			0.371637,
			0.372229,
			0.372801,
			0.373353,
			0.373887,
			0.374402,
			0.374899,
			0.375378,
			0.375841,
			0.376287,
			0.376717,
			0.377132,
			0.377531,
			0.377915,
			0.378286,
			0.378641,
			0.378983,
			0.379311,
			0.379625,
			0.379927,
			0.380216,
			0.380493,
			0.380757,
			0.381009,
			0.381249,
			0.381478,
			0.381695,
			0.381901,
			0.382096,
			0.382281,
			0.382454,
			0.382617,
			0.382769,
			0.382911,
			0.383042,
			0.383164,
			0.383275,
			0.383376,
			0.383468,
			0.383549,
			0.383621,
			0.383683,
			0.383736,
			0.383779,
			0.383812,
			0.383836,
			0.383850,
		},
		Sample{
			0.000000,
			1.016653,
			2.183918,
			3.737391,
			6.208124,
			11.348715,
			31.347207,
			-67.763182,
			-18.032140,
			-10.846230,
			-7.924944,
			-6.321869,
			-5.299351,
			-4.584967,
			-4.054456,
			-3.642912,
			-3.313042,
			-3.041845,
			-2.814332,
			-2.620298,
			-2.452541,
			-2.305826,
			-2.176246,
			-2.060827,
			-1.957257,
			-1.863715,
			-1.778741,
			-1.701152,
			-1.629977,
			-1.564414,
			-1.503789,
			-1.447536,
			-1.395173,
			-1.346289,
			-1.300530,
			-1.257587,
			-1.217194,
			-1.179117,
			-1.143150,
			-1.109111,
			-1.076839,
			-1.046190,
			-1.017038,
			-0.989267,
			-0.962773,
			-0.937465,
			-0.913258,
			-0.890074,
			-0.867847,
			-0.846511,
			-0.826010,
			-0.806291,
			-0.787306,
			-0.769009,
			-0.751361,
			-0.734323,
			-0.717860,
			-0.701941,
			-0.686536,
			-0.671616,
			-0.657157,
			-0.643133,
			-0.629523,
			-0.616306,
			-0.603462,
			-0.590974,
			-0.578823,
			-0.566995,
			-0.555473,
			-0.544245,
			-0.533296,
			-0.522614,
			-0.512187,
			-0.502004,
			-0.492056,
			-0.482331,
			-0.472820,
			-0.463515,
			-0.454406,
			-0.445487,
			-0.436749,
			-0.428186,
			-0.419789,
			-0.411554,
			-0.403474,
			-0.395542,
			-0.387753,
			-0.380102,
			-0.372584,
			-0.365194,
			-0.357927,
			-0.350778,
			-0.343744,
			-0.336820,
			-0.330003,
			-0.323288,
			-0.316672,
			-0.310151,
			-0.303723,
			-0.297384,
			-80.291132,
			-0.284961,
			-0.278871,
			-0.272859,
			-0.266921,
			-0.261056,
			-0.255260,
			-0.249532,
			-0.243869,
			-0.238269,
			-0.232730,
			-0.227250,
			-0.221826,
			-0.216457,
			-0.211142,
			-0.205877,
			-0.200662,
			-0.195495,
			-0.190374,
			-0.185297,
			-0.180263,
			-0.175271,
			-0.170318,
			-0.165404,
			-0.160527,
			-0.155686,
			-0.150879,
			-0.146104,
			-0.141363,
			-0.136651,
			-0.131969,
			-0.127316,
			-0.122689,
			-0.118088,
			-0.113512,
			-0.108959,
			-0.104430,
			-0.099921,
			-0.095434,
			-0.090966,
			-0.086516,
			-0.082084,
			-0.077669,
			-0.073269,
			-0.068885,
			-0.064513,
			-0.060155,
			-0.055809,
			-0.051474,
			-0.047149,
			-0.042833,
			-0.038526,
			-0.034226,
			-0.029933,
			-0.025646,
			-0.021364,
			-0.017086,
			-0.012812,
			-0.008540,
			-0.004269,
		},
	}

	actual := testSample.DFT()

	if !actual.Rex.Equals(expected.Rex) {
		t.Error("expected ", expected, " actual ", actual)
	}

	if !actual.Imx.Equals(expected.Imx) {
		t.Error("expected ", expected, " actual ", actual)
	}
}
